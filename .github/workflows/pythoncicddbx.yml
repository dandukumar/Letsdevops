name: Python CI/CD with Databricks

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      PACKAGE_VERSION: ${{ steps.set_version.outputs.package_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'  # Specify the Python version you need

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel

    - name: Set version
      id: set_version
      run: |
        PACKAGE_VERSION=$(date +'%Y.%m.%d.%H%M%S')
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
        echo "::set-output name=package_version::$PACKAGE_VERSION"

    - name: Build wheel
      env:
        PACKAGE_VERSION: ${{ steps.set_version.outputs.package_version }}
      run: |
        cd my_project
        python setup.py sdist bdist_wheel

    - name: List wheel files
      run: |
        ls -al my_project/dist

    - name: Create artifact
      uses: actions/upload-artifact@v3
      with:
        name: wheel-files-${{ steps.set_version.outputs.package_version }}
        path: my_project/dist/*.whl

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'  # Specify the Python version you need

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: wheel-files-${{ needs.build.outputs.PACKAGE_VERSION }}
        path: dist

    - name: List downloaded files
      run: ls -al dist

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl

    - name: Run tests
      run: |
        pip install pytest
        pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'  # Specify the Python version you need

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: wheel-files-${{ needs.build.outputs.PACKAGE_VERSION }}
        path: dist

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl

    - name: Install Databricks CLI
      run: |
        pip install databricks-cli

    - name: Configure Databricks CLI
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        databricks configure --token <<EOF
        $DATABRICKS_HOST
        $DATABRICKS_TOKEN
        EOF

    - name: Upload wheel to Databricks
      run: |
        databricks fs cp dist/*.whl dbfs:/FileStore/wheels/ --overwrite

    - name: Create Databricks job
      run: |
        cat <<EOF > job_config.json
        {
          "name": "My Python Project Job",
          "new_cluster": {
            "spark_version": "7.3.x-scala2.12",
            "node_type_id": "Standard_D3_v2",
            "num_workers": 2
          },
          "libraries": [
            {
              "whl": "dbfs:/FileStore/wheels/$(basename dist/*.whl)"
            }
          ],
          "spark_python_task": {
            "python_file": "dbfs:/FileStore/wheels/$(basename dist/*.whl)"
          }
        }
        EOF
        databricks jobs create --json-file job_config.json

    - name: Run Databricks job
      run: |
        JOB_ID=$(databricks jobs list --output JSON | jq -r '.jobs[] | select(.settings.name == "My Python Project Job") | .job_id')
        databricks jobs run-now --job-id $JOB_ID
